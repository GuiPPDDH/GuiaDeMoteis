// Mocks generated by Mockito 5.4.5 from annotations
// in my_guia_de_moteis/test/providers/motel_provider_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;
import 'dart:ui' as _i7;

import 'package:mockito/mockito.dart' as _i1;
import 'package:my_guia_de_moteis/models/motel.dart' as _i5;
import 'package:my_guia_de_moteis/providers/motel_provider.dart' as _i6;
import 'package:my_guia_de_moteis/repository/motel_repository.dart' as _i2;
import 'package:my_guia_de_moteis/services/motel_service.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeMotelRepository_0 extends _i1.SmartFake
    implements _i2.MotelRepository {
  _FakeMotelRepository_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeMotelService_1 extends _i1.SmartFake implements _i3.MotelService {
  _FakeMotelService_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [MotelService].
///
/// See the documentation for Mockito's code generation for more information.
class MockMotelService extends _i1.Mock implements _i3.MotelService {
  MockMotelService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.MotelRepository get motelRepository =>
      (super.noSuchMethod(
            Invocation.getter(#motelRepository),
            returnValue: _FakeMotelRepository_0(
              this,
              Invocation.getter(#motelRepository),
            ),
          )
          as _i2.MotelRepository);

  @override
  _i4.Future<List<_i5.Motel>> fetchMoteis() =>
      (super.noSuchMethod(
            Invocation.method(#fetchMoteis, []),
            returnValue: _i4.Future<List<_i5.Motel>>.value(<_i5.Motel>[]),
          )
          as _i4.Future<List<_i5.Motel>>);
}

/// A class which mocks [MotelProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockMotelProvider extends _i1.Mock implements _i6.MotelProvider {
  MockMotelProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.MotelService get motelService =>
      (super.noSuchMethod(
            Invocation.getter(#motelService),
            returnValue: _FakeMotelService_1(
              this,
              Invocation.getter(#motelService),
            ),
          )
          as _i3.MotelService);

  @override
  List<_i5.Motel> get moteis =>
      (super.noSuchMethod(
            Invocation.getter(#moteis),
            returnValue: <_i5.Motel>[],
          )
          as List<_i5.Motel>);

  @override
  bool get isLoading =>
      (super.noSuchMethod(Invocation.getter(#isLoading), returnValue: false)
          as bool);

  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);

  @override
  _i4.Future<void> loadMoteis() =>
      (super.noSuchMethod(
            Invocation.method(#loadMoteis, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  void addListener(_i7.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#addListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void removeListener(_i7.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#removeListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );

  @override
  void notifyListeners() => super.noSuchMethod(
    Invocation.method(#notifyListeners, []),
    returnValueForMissingStub: null,
  );
}
